const core = require('@actions/core');
const github = require('@actions/github');

const validEvent = ['pull_request'];

const PRE_PR_DESCRIPTION = 'ðŸ’¡ This PR relates to the following Jira stories (generated by `get-pr-commits` action ðŸ“Ÿ): ';

type CommitsList = {
  data: { commit: { message: string } }[]
}

async function main() {
  try {
    const { eventName, payload: { repository: repo, pull_request: pr } } = github.context;
    if (validEvent.indexOf(eventName) < 0) {
      core.error(`Invalid event: ${eventName}`);
      return;
    }

    const token = core.getInput('token');
    const octokit = new github.GitHub(token);
    core.info('Getting current PR data');

    const { data: pullRequest } = await octokit.pulls.get({
      owner: repo.owner.login,
      repo: repo.name,
      pull_number: pr.number,
    });

    const prDescription = pullRequest.body || '';
    core.info('Fetching commits messages');
    const commitsListed: CommitsList = await octokit.pulls.listCommits({
      owner: repo.owner.login,
      repo: repo.name,
      pull_number: pr.number,
    });

    let commits = commitsListed.data;
    const regex = new RegExp('[A-Z]{2,}-\\d+', 'gm');
    commits = commits.filter(({ commit }) => {
      return regex.test(commit.message);
    });

    core.info(`Found ${commits.length} commits messages that relates to Jira ticket`);

    const commitsMessages = commits.map((commit) => commit.commit.message);
    const commitsMessagesPrBody = commitsMessages.join('<br />');
    const newPrDescription = prDescription + ' <br /> ' + PRE_PR_DESCRIPTION + ' <br />' + commitsMessagesPrBody;

    core.info('Updating PR description');

    await octokit.pulls.update({
      owner: repo.owner.login,
      repo: repo.name,
      pull_number: pr.number,
      body: newPrDescription
    });

  } catch (error: any) {
    core.error(error.message)
  }
}

main();
